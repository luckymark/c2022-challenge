#include<stdio.h>
#include<easyx.h>
#include<conio.h>
#include<mmsystem.h>
int board[15][15];
typedef struct point
{
    int x;
    int y;
    int value;
}point;
typedef struct points
{
    struct point best[10];
}points;
point  decision;
#define C_NONE 0//棋子：黑子,白子,无子
#define C_BLACK 1
#define C_WHITE 2

//棋型代号 下标 权重
#define OTHER 0//0,其他棋型不考虑
#define WIN 1//10000001,白赢
#define LOSE 2//-10000000
#define FLEX4 3//70000,白活4
#define flex4 4//-80000
#define BLOCK4 5//30000，白冲4
#define block4 6//-40000
#define FLEX3 7//7000，白活3
#define flex3 8//-8000
#define BLOCK3 9//300，白冲3
#define block3 10//-400
#define FLEX2 11//30，白活2
#define flex2 12//-40
#define BLOCK2 13//1，白冲2
#define block2 14//-2
#define FLEX1 15//1，白活1
#define flex1 16//-2

int tuple6type[4][4][4][4][4][4];//棋型辨识数组,0无子,1黑子,2白子,3边界

//初始化棋型
void init_tuple6type() 
{
    memset(tuple6type, 0, sizeof(tuple6type));//全部设为0
    //白连5,ai赢
    tuple6type[2][2][2][2][2][2] = WIN;
    tuple6type[2][2][2][2][2][0] = WIN;
    tuple6type[0][2][2][2][2][2] = WIN;
    tuple6type[2][2][2][2][2][1] = WIN;
    tuple6type[1][2][2][2][2][2] = WIN;
    tuple6type[3][2][2][2][2][2] = WIN;//边界考虑
    tuple6type[2][2][2][2][2][3] = WIN;
    //黑连5,ai输
    tuple6type[1][1][1][1][1][1] = LOSE;
    tuple6type[1][1][1][1][1][0] = LOSE;
    tuple6type[0][1][1][1][1][1] = LOSE;
    tuple6type[1][1][1][1][1][2] = LOSE;
    tuple6type[2][1][1][1][1][1] = LOSE;
    tuple6type[3][1][1][1][1][1] = LOSE;
    tuple6type[1][1][1][1][1][3] = LOSE;
    //白活4
    tuple6type[0][2][2][2][2][0] = FLEX4;
    //黑活4
    tuple6type[0][1][1][1][1][0] = flex4;
    //白活3
    tuple6type[0][2][2][2][0][0] = FLEX3;
    tuple6type[0][0][2][2][2][0] = FLEX3;
    tuple6type[0][2][0][2][2][0] = FLEX3;
    tuple6type[0][2][2][0][2][0] = FLEX3;
    //黑活3
    tuple6type[0][1][1][1][0][0] = flex3;
    tuple6type[0][0][1][1][1][0] = flex3;
    tuple6type[0][1][0][1][1][0] = flex3;
    tuple6type[0][1][1][0][1][0] = flex3;
    //白活2
    tuple6type[0][2][2][0][0][0] = FLEX2;
    tuple6type[0][2][0][2][0][0] = FLEX2;
    tuple6type[0][2][0][0][2][0] = FLEX2;
    tuple6type[0][0][2][2][0][0] = FLEX2;
    tuple6type[0][0][2][0][2][0] = FLEX2;
    tuple6type[0][0][0][2][2][0] = FLEX2;
    //黑活2
    tuple6type[0][1][1][0][0][0] = flex2;
    tuple6type[0][1][0][1][0][0] = flex2;
    tuple6type[0][1][0][0][1][0] = flex2;
    tuple6type[0][0][1][1][0][0] = flex2;
    tuple6type[0][0][1][0][1][0] = flex2;
    tuple6type[0][0][0][1][1][0] = flex2;
    //白活1
    tuple6type[0][2][0][0][0][0] = FLEX1;
    tuple6type[0][0][2][0][0][0] = FLEX1;
    tuple6type[0][0][0][2][0][0] = FLEX1;
    tuple6type[0][0][0][0][2][0] = FLEX1;
    //黑活1
    tuple6type[0][1][0][0][0][0] = flex1;
    tuple6type[0][0][1][0][0][0] = flex1;
    tuple6type[0][0][0][1][0][0] = flex1;
    tuple6type[0][0][0][0][1][0] = flex1;

    int p1, p2, p3, p4, p5, p6, x, y, ix, iy;//x:左5中黑个数,y:左5中白个数,ix:右5中黑个数,iy:右5中白个数
    for (p1 = 0; p1 < 4; ++p1) {
        for (p2 = 0; p2 < 3; ++p2) {
            for (p3 = 0; p3 < 3; ++p3) {
                for (p4 = 0; p4 < 3; ++p4) {
                    for (p5 = 0; p5 < 3; ++p5) {
                        for (p6 = 0; p6 < 4; ++p6) {
                            x = y = ix = iy = 0;

                            if (p1 == 1)x++;
                            else if (p1 == 2)y++;

                            if (p2 == 1) { x++; ix++; }
                            else if (p2 == 2) { y++; iy++; }

                            if (p3 == 1) { x++; ix++; }
                            else if (p3 == 2) { y++; iy++; }

                            if (p4 == 1) { x++; ix++; }
                            else if (p4 == 2) { y++; iy++; }

                            if (p5 == 1) { x++; ix++; }
                            else if (p5 == 2) { y++; iy++; }

                            if (p6 == 1) { ix++; }
                            else if (p6 == 2)iy++;

                            if (p1 == 3 || p6 == 3) {//有边界
                                if (p1 == 3 && p6 != 3) {//左边界
                                    //白冲4
                                    if (ix == 0 && iy == 4) {//若右边有空位是活4也没关系，因为活4权重远大于冲4，再加上冲4权重变化可以不计
                                        if (tuple6type[p1][p2][p3][p4][p5][p6] == 0)
                                            tuple6type[p1][p2][p3][p4][p5][p6] = BLOCK4;
                                    }
                                    //黑冲4
                                    if (ix == 4 && iy == 0) {
                                        if (tuple6type[p1][p2][p3][p4][p5][p6] == 0)
                                            tuple6type[p1][p2][p3][p4][p5][p6] = block4;
                                    }
                                    //白眠3
                                    if (ix == 0 && iy == 3) {
                                        if (tuple6type[p1][p2][p3][p4][p5][p6] == 0)
                                            tuple6type[p1][p2][p3][p4][p5][p6] = BLOCK3;
                                    }
                                    //黑眠3
                                    if (ix == 3 && iy == 0) {
                                        if (tuple6type[p1][p2][p3][p4][p5][p6] == 0)
                                            tuple6type[p1][p2][p3][p4][p5][p6] = block3;
                                    }
                                    //白眠2
                                    if (ix == 0 && iy == 2) {
                                        if (tuple6type[p1][p2][p3][p4][p5][p6] == 0)
                                            tuple6type[p1][p2][p3][p4][p5][p6] = BLOCK2;
                                    }
                                    //黑眠2
                                    if (ix == 2 && iy == 0) {
                                        if (tuple6type[p1][p2][p3][p4][p5][p6] == 0)
                                            tuple6type[p1][p2][p3][p4][p5][p6] = block2;
                                    }
                                }
                                else if (p6 == 3 && p1 != 3) {//右边界
                                   //白冲4
                                    if (x == 0 && y == 4) {
                                        if (tuple6type[p1][p2][p3][p4][p5][p6] == 0)
                                            tuple6type[p1][p2][p3][p4][p5][p6] = BLOCK4;
                                    }
                                    //黑冲4
                                    if (x == 4 && y == 0) {
                                        if (tuple6type[p1][p2][p3][p4][p5][p6] == 0)
                                            tuple6type[p1][p2][p3][p4][p5][p6] = block4;
                                    }
                                    //黑眠3
                                    if (x == 3 && y == 0) {
                                        if (tuple6type[p1][p2][p3][p4][p5][p6] == 0)
                                            tuple6type[p1][p2][p3][p4][p5][p6] = BLOCK3;
                                    }
                                    //白眠3
                                    if (x == 0 && y == 3) {
                                        if (tuple6type[p1][p2][p3][p4][p5][p6] == 0)
                                            tuple6type[p1][p2][p3][p4][p5][p6] = block3;
                                    }
                                    //黑眠2
                                    if (x == 2 && y == 0) {
                                        if (tuple6type[p1][p2][p3][p4][p5][p6] == 0)
                                            tuple6type[p1][p2][p3][p4][p5][p6] = BLOCK2;
                                    }
                                    //白眠2
                                    if (x == 0 && y == 2) {
                                        if (tuple6type[p1][p2][p3][p4][p5][p6] == 0)
                                            tuple6type[p1][p2][p3][p4][p5][p6] = block2;
                                    }
                                }
                            }
                            else {//无边界
                               //白冲4
                                if ((x == 0 && y == 4) || (ix == 0 && iy == 4)) {
                                    if (tuple6type[p1][p2][p3][p4][p5][p6] == 0)
                                        tuple6type[p1][p2][p3][p4][p5][p6] = BLOCK4;
                                }
                                //黑冲4
                                if ((x == 4 && y == 0) || (ix == 4 && iy == 0)) {
                                    if (tuple6type[p1][p2][p3][p4][p5][p6] == 0)
                                        tuple6type[p1][p2][p3][p4][p5][p6] = block4;
                                }
                                //白眠3
                                if ((x == 0 && y == 3) || (ix == 0 && iy == 3)) {
                                    if (tuple6type[p1][p2][p3][p4][p5][p6] == 0)
                                        tuple6type[p1][p2][p3][p4][p5][p6] = BLOCK3;
                                }
                                //黑眠3
                                if ((x == 3 && y == 0) || (ix == 3 && iy == 0)) {
                                    if (tuple6type[p1][p2][p3][p4][p5][p6] == 0)
                                        tuple6type[p1][p2][p3][p4][p5][p6] = block3;
                                }
                                //白眠2
                                if ((x == 0 && y == 2) || (ix == 0 && iy == 2)) {
                                    if (tuple6type[p1][p2][p3][p4][p5][p6] == 0)
                                        tuple6type[p1][p2][p3][p4][p5][p6] = BLOCK2;
                                }
                                //黑眠2
                                if ((x == 2 && y == 0) || (ix == 2 && iy == 0)) {
                                    if (tuple6type[p1][p2][p3][p4][p5][p6] == 0)
                                        tuple6type[p1][p2][p3][p4][p5][p6] = block2;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

//反转棋盘，在寻找最好的十个点时用到（因为在模拟玩家落子时，由于分数为相反数，所以要反转黑白棋子）
void reverse(int board[15][15], int reboard[15][15])
{
    for (int i = 0; i < 15; i++)
    {
        for (int j = 0; j < 15; j++)
        {
            if (board[i][j] == 0)continue;
            if (board[i][j] == 1)reboard[i][j] = 2;
            if (board[i][j] == 2)reboard[i][j] = 1;
        }
    }
}

//估值
int evaluate(int board[15][15]) {
    //各棋型权重
    int weight[17] = { 0,1000000,-10000000,50000,-100000,400,-100000,6000,-8000,20,-50,20,-50,1,-3,1,-3 };

    int i, j, type;
    int stat[17];//统计4个方向上每种棋型的个数
    memset(stat, 0, sizeof(stat));

    int A[17][17];//包括边界的虚拟大棋盘,board[i][j]=A[i-1][j-1],3表示边界
    for (int i = 0; i < 17; ++i)A[i][0] = 3;
    for (int i = 0; i < 17; ++i)A[i][16] = 3;
    for (int j = 0; j < 17; ++j)A[0][j] = 3;
    for (int j = 0; j < 17; ++j)A[16][j] = 3;
    for (int i = 0; i < 15; ++i)
        for (int j = 0; j < 15; ++j)
            A[i + 1][j + 1] = board[i][j];

    //判断横向棋型
    for (i = 1; i <= 15; ++i) {
        for (j = 0; j < 12; ++j) {
            type = tuple6type[A[i][j]][A[i][j + 1]][A[i][j + 2]][A[i][j + 3]][A[i][j + 4]][A[i][j + 5]];
            stat[type]++;
        }
    }
    //判断竖向棋型
    for (i = 0; i < 12; ++i) {
        for (j = 1; j <= 15; ++j) {
            type = tuple6type[A[i][j]][A[i + 1][j]][A[i + 2][j]][A[i + 3][j]][A[i + 4][j]][A[i + 5][j]];
            stat[type]++;
        }
    }
    //判断左上至右下棋型
    for (i = 0; i < 12; ++i) {
        for (j = 0; j < 12; ++j) {
            type = tuple6type[A[i][j]][A[i + 1][j + 1]][A[i + 2][j + 2]][A[i + 3][j + 3]][A[i + 4][j + 4]][A[i + 5][j + 5]];
            stat[type]++;
        }
    }
    //判断右上至左下棋型
    for (i = 0; i < 12; ++i) {
        for (j = 5; j < 17; ++j) {
            type = tuple6type[A[i][j]][A[i + 1][j - 1]][A[i + 2][j - 2]][A[i + 3][j - 3]][A[i + 4][j - 4]][A[i + 5][j - 5]];
            stat[type]++;
        }
    }

    int score = 0;
    for (i = 1; i < 17; ++i) {
        score += stat[i] * weight[i];//初步计分
    }
    return score;
}

//寻找最好的十个点
points seekbp(int board[15][15])
{
    int value[15][15];
    int is[15][15];
    for (int i = 0; i < 15; i++)
    {
        for (int j = 0; j < 15; j++)
        {
            if (board[i][j] != C_NONE)
            {
                for (int k = -3; k < 3; k++)
                {
                    if (i + k >= 0 && i + k <= 15)
                    {
                        is[i + k][j] = 1;
                        if (j + k >= 0 && j + k < 15)is[i + k][j + k] = 1;
                        if (j - k >= 0 && j - k < 15)is[i + k][j - k] = 1;
                    }
                    if (j + k >= 0 && j + k <= 15)is[i][j+k] = 1;
                }
            }
        }
    }
    for (int i = 0; i < 15; i++)
    {
        for (int j = 0; j < 15; j++)
        {
            value[i][j] = -1000000;
            if (board[i][j] == C_NONE && is[i][j] == 1)
            {
                board[i][j] = C_WHITE;
                value[i][j] = evaluate(board);
                board[i][j] = C_NONE;
            }
        }
    }
    int min;
    points bp;
    for (int k = 0; k < 10; k++)
    {
        min = -1000000;
        for (int i = 0; i < 15; i++)
        {
            for (int j = 0; j < 15; j++)
            {
                if (value[i][j] > min)
                {
                    min = value[i][j];
                    bp.best[k].value = value[i][j];
                    bp.best[k].x = i;
                    bp.best[k].y = j;
                }
            }
        }
        value[bp.best[k].x][bp.best[k].y] = -100000;
    }
    return bp;
}

//分析
int analyse(int board[15][15], int depth, int alpha, int beta) {
    if (depth == 0) //估值
    {
        return  evaluate(board);
    }
    if (depth % 2 == 0)//max层,我方(白)决策
    {
        points bp = seekbp(board);
        for(int i=0;i<10;i++)
        {
            board[bp.best[i].x][bp.best[i].y] = C_WHITE;
            int a = analyse(board, depth - 1, alpha, beta);
            board[bp.best[i].x][bp.best[i].y] = C_NONE;
        if (a > alpha)
        {
            alpha = a;
            if (depth == 40) //40是自己设立的深度(可以改为60,80,但必须为偶数),用来找最佳落子
            {
                decision.x = bp.best[i].x;
                decision.y = bp.best[i].y;
            }
        }
        if (beta <= alpha)break;//剪枝
         }
    return alpha;
    }
    if (depth % 2 == 0)//max层,对方(黑)决策
    {
        int reboard[15][15];
        reverse(board, reboard);
        points bp = seekbp(reboard);
        for (int i = 0; i < 10; i++)
        {
            board[bp.best[i].x][bp.best[i].y] = C_BLACK;
            int a = analyse(board, depth - 1, alpha, beta);
            board[bp.best[i].x][bp.best[i].y] = C_NONE;
            if (a <beta)
            {
                beta = a;
            }
            if (beta <= alpha)break;//剪枝
        }
        return beta;
    }
}

//玩家行动
void player()
{
    int i, j;
    ExMessage msg;
    while (1)
    {
        msg = getmessage(EX_MOUSE);
        if (msg.message == WM_LBUTTONDOWN)
        {
            if (msg.x > 17 && msg.x < 457 && msg.y>17 && msg.y < 457)
            {
                i = (int)((msg.x - 12) / 30);
                j = (int)((msg.y - 12) / 30);
                if (board[i][j] == C_NONE)break;
            }
        }
    }
    board[i ][j ] = C_BLACK;
}

//电脑行动
void ai()
{
    analyse(board, 40, -100000000, 100000000);
    board[decision.x][decision.y] = C_WHITE;
}

//判断输赢
int check()
{
    int i, j, m, n;
    for (i = 0; i < 15; i++)
    {
        for (j = 0; j < 15; j++)
        {
            if (board[i][j] == C_BLACK)
            {
                //判断横向棋型
                for (m = i; m < i + 5; m++)
                {
                    if (m < 0 || m>15 )break;
                    if (board[m][j] != C_BLACK)break;
                    if (m == i + 4)return 1;
                }
                //判断竖向棋型
                for (m = j; m < j + 5; m++)
                {
                    if (m < 0 || m>15 )break;
                    if (board[i][m] != C_BLACK)break;
                    if (m == j + 4)return 1;
                }
                //判断左上至右下棋型
                for (m = i, n = j; m < i + 5; m++, n++)
                {
                    if (m < 0 || m>15 || n < 0 || n>15)break;
                    if (board[m][n] != C_BLACK)break;
                    if (m == i + 4)return 1;
                }
                //判断右上至左下棋型
                for (m = i, n = j ; m < i + 5; m++, n--)
                {
                    if (m < 0 || m>15 || n < 0 || n>15)break;
                    if (board[m][n] != C_BLACK)break;
                    if (m == i + 4)return 1;
                }
            }
            if (board[i][j] == C_WHITE)
            {
                //判断横向棋型
                for (m = i; m < i + 5; m++)
                {
                    if (m < 0 || m>15)break;
                    if (board[m][j] != C_WHITE)break;
                    if (m == i + 4)return 2;
                }
                //判断竖向棋型
                for (m = j; m < j + 5; m++)
                {
                    if (m < 0 || m>15 )break;
                    if (board[i][m] != C_WHITE)break;
                    if (m == j + 4)return 2;
                }
                //判断左上至右下棋型
                for (m = i, n = j; m < i + 5; m++, n++)
                {
                    if (m < 0 || m>15 || n < 0 || n>15)break;
                    if (board[m][n] != C_WHITE)break;
                    if (m == i + 4)return 2;
                }
                //判断右上至左下棋型
                for (m = i, n = j ; m < i + 5; m++, n--)
                {
                    if (m < 0 || m>15 || n < 0 || n>15)break;
                    if (board[m][n] != C_WHITE)break;
                    if (m == i + 4)return 2;
                }
            }
        }
    }
    return 0;
}


IMAGE playgraph;
IMAGE startgraph;
IMAGE blackchess[2];
IMAGE whitechess[2];

//加载图片
void loadimg()
{
    loadimage(&playgraph, "./play.jpg", 474, 474);
    loadimage(&startgraph, "./start.jpg", 474, 474);
    loadimage(&blackchess[0], "./black1.jpg", 20, 20);
    loadimage(&blackchess[1], "./black2.jpg", 20, 20);
    loadimage(&whitechess[0], "./white1.jpg", 20, 20);
    loadimage(&whitechess[1], "./white2.jpg", 20, 20);
}
int startshow()
{
    putimage(0, 0, &startgraph);
    rectangle(200, 250, 250, 300);
    rectangle(200, 300, 250, 350);
    char a[] = "start";
    char b[] = "end";
    outtextxy(210, 275, a);
    outtextxy(210, 325, b);
    ExMessage msg;
    while (1)
    {
        msg = getmessage(EX_MOUSE);
        if (msg.message == WM_LBUTTONDOWN)
        {
            if (msg.x > 200 && msg.x < 250 && msg.y>250 && msg.y < 300)return 1;
            if (msg.x > 200 && msg.x < 250 && msg.y>300 && msg.y < 350)return 2;
        }
    }
}

//显示画面
void gameshow()
{
    cleardevice();
    putimage(0, 0, &playgraph);
    for (int i = 0; i < 15; i++)
    {
        for (int j = 0; j < 15; j++)
        {
            if (board[i][j] == C_BLACK)
            {
                putimage(17+i * 30, 17+j * 30, &blackchess[0],SRCAND);
                //putimage(17 + i * 30, 17 + j * 30, &blackchess[1], SRCPAINT);
            }
            if (board[i][j] == C_WHITE)
            {
                putimage(17 + i * 30, 17 + j * 30, &whitechess[0], SRCAND);
                putimage(17+i * 30,17+j * 30, &whitechess[1],SRCPAINT);
            }
        }
    }
}

//下棋
void play()
{
    int p = 0;
    while (1)
    {
        gameshow();
        player();
        gameshow();
        p = check();
        if (p != 0)break;
        ai();
        p == check();
        if (p != 0)break;
    }
    if (p == 1)MessageBox(NULL, "win", "over", MB_OK);
    if (p == 2)MessageBox(NULL, "lose", "over", MB_OK);
    for (int i = 0; i < 15; i++)
    {
        for (int j = 0; j < 15; j++)
        {
            board[i][j] = 0;
        }
    }
}

int main()
{
    init_tuple6type();
    initgraph(474, 474);
    loadimg();
    int i;
    while (1)
    {
        i=startshow();
        if (i == 2)break;
        if (i == 1)play();
    }
    closegraph();
    return 0;
}
